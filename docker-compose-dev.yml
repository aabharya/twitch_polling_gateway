volumes:
  POLLING_DATA:
  USER_MANAGEMENT_DATA:

networks:
  POLLING_BACKEND:

services:
  polling_db:
    image: "postgres:15-alpine"
    restart: "no"
    env_file:
      - deploy/envs/polling_db.env
    volumes:
      - POLLING_DATA:/db_data
    networks:
      - POLLING_BACKEND
    ports:
      - "5314:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    networks:
      - POLLING_BACKEND
    ports:
      - "8095:8080"
    depends_on:
      - polling_db
      - users_db

  redis:
    image: "redis:alpine"
    restart: unless-stopped
    networks:
      - POLLING_BACKEND
    ports:
      - "63790:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_db:
    image: "postgres:15-alpine"
    restart: "no"
    env_file:
      - deploy/envs/users_db.env
    volumes:
      - USER_MANAGEMENT_DATA:/db_data
    networks:
      - POLLING_BACKEND
    ports:
      - "5313:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_api:
    hostname: users-api
    build:
      context: .
      dockerfile: users_api.Dockerfile
    volumes:
      - ./users_api/src:/home/users_api
    env_file:
      - deploy/envs/users_api.env
      - deploy/envs/celery_worker.env
      - deploy/envs/jwt.env
    networks:
      - POLLING_BACKEND
    depends_on:
      users_db:
        condition: service_healthy

  celery-worker:
    build:
      context: .
      dockerfile: celery_worker.Dockerfile
    volumes:
      - ./polling_api:/home/polling_api
    env_file:
      - deploy/envs/celery_worker.env
      - deploy/envs/polling_api.env
      - deploy/envs/jwt.env
    networks:
      - POLLING_BACKEND
    depends_on:
      polling_db:
        condition: service_healthy
      redis:
        condition: service_healthy

  polling_api:
    hostname: polling-api
    build:
      context: .
      dockerfile: polling_api.Dockerfile
    volumes:
      - ./polling_api:/home/polling_api
    env_file:
      - deploy/envs/celery_worker.env
      - deploy/envs/polling_api.env
      - deploy/envs/jwt.env
    networks:
      - POLLING_BACKEND
    depends_on:
      users_api:
        condition: service_healthy
      polling_db:
        condition: service_healthy
      redis:
        condition: service_healthy

  docs_api:
    hostname: docs-api
    build:
      context: .
      dockerfile: docs_api.Dockerfile
    volumes:
      - ./docs_api/src:/home/docs_api
    env_file:
      - deploy/envs/docs_api.env
    networks:
      - POLLING_BACKEND
    depends_on:
      users_api:
        condition: service_healthy
      polling_api:
        condition: service_healthy

  pushpin:
    hostname: pushpin
    image: fanout/pushpin
    restart: unless-stopped
    ports:
      - "7999:7999"
    volumes:
      - ./deploy/docker/pushpin:/etc/pushpin:ro
    networks:
      - POLLING_BACKEND
    depends_on:
      redis:
        condition: service_healthy

  gateway:
    image: "nginx:1.17.8-alpine"
    volumes:
      - ./deploy/docker/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - POLLING_BACKEND
    ports:
      - "8000:80"
    depends_on:
      users_api:
        condition: service_healthy
      polling_api:
        condition: service_healthy
      docs_api:
        condition: service_healthy

